import { useState, useEffect } from "react";
import { orientations } from "../../utils/types"; // Screen orientation type
import './Vulnerability.css';

const parseXML = (xmlText) => {
  const parser = new DOMParser();
  const xml = parser.parseFromString(xmlText, "text/xml");
  const items = xml.querySelectorAll("item");

  return Array.from(items).map((item) => ({
    title: item.querySelector("title")?.textContent || "Ei otsikkoa",
    link: item.querySelector("link")?.textContent || "#",
    description: item.querySelector("description")?.textContent || "",
  }));
};

const RSSFeed = (props) => {
  const [items, setItems] = useState([]);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRSS = async () => {
      try {
        const response = await fetch("/rss");
        const text = await response.text();
        const allItems = parseXML(text);
        setItems(allItems.slice(0, 3)); // Ota vain ensimmäiset 3
      } catch (error) {
        setError("Virhe haettaessa RSS-syötettä");
      }
    };

    fetchRSS();
  }, []);

  // Valitaan oikea kuva screen-orientaation mukaan
  const url = props.orientation === orientations.portrait 
    ? props.url.portrait 
    : props.url.landscape;

  return (
    <div className="scene-container" style={{ backgroundImage: `url(${import.meta.env.VITE_API_ADDRESS + url})` }}>
      <div className="vulnerability-news">
        <h2>Kyberturvallisuuskeskuksen haavoittuvuudet</h2>
        {error && <p style={{ color: "red" }}>{error}</p>}
        {items.length > 0 ? (
          <ul>
            {items.map((item, index) => (
              <li key={index}>
                <a href={item.link} target="_blank" rel="noopener noreferrer">
                  <strong>{item.title}</strong>
                </a>
                <p>{item.description}</p>
              </li>
            ))}
          </ul>
        ) : (
          <p>Ei uutisia saatavilla.</p>
        )}
      </div>
    </div>
  );
};

export default RSSFeed;